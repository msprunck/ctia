(ns ctia.http.routes.graphql.malware-test
  (:require [clj-momo.test-helpers
             [core :as mth]
             [http :refer [encode]]]
            [clojure.test :refer [is join-fixtures testing use-fixtures]]
            [ctia.test-helpers.graphql :as gh]
            [ctim.examples
             [malwares :refer [new-malware-maximal]]]
            [clj-momo.test-helpers.core :as mth]
            [ctia.test-helpers.core :as helpers]
            [ctia.test-helpers.fake-whoami-service :as whoami-helpers]
            [ctia.test-helpers.store :refer [deftest-for-each-store]]
            [ctia.test-helpers.auth :refer [all-capabilities]]
            [ctia.schemas.sorting :as sort-fields]
            [ctia.schemas.graphql.helpers :as g]))

(use-fixtures :once (join-fixtures [mth/fixture-schema-validation
                                    helpers/fixture-properties:clean
                                    whoami-helpers/fixture-server]))

(use-fixtures :each whoami-helpers/fixture-reset-state)

(defn init-graph-data []
  (let [entity-1 (gh/create-object
                  "malware"
                  (-> new-malware-maximal
                      (assoc :name "Malware 1")
                      (dissoc :id)))
        entity-2 (gh/create-object
                  "malware"
                  (-> new-malware-maximal
                      (assoc :name "Malware 2")
                      (dissoc :id)))
        entity-3 (gh/create-object
                  "malware"
                  (-> new-malware-maximal
                      (assoc :name "Malware 3")
                      (dissoc :id)))]
    (gh/create-object "feedback" (gh/feedback-1 (:id entity-1)))
    (gh/create-object "feedback" (gh/feedback-2 (:id entity-1)))
    (gh/create-object "relationship"
                      {:relationship_type "variant-of"
                       :target_ref (:id entity-2)
                       :source_ref (:id entity-1)})
    (gh/create-object "relationship"
                      {:relationship_type "variant-of"
                       :target_ref (:id entity-3)
                       :source_ref (:id entity-1)})
    {:malware-1 entity-1
     :malware-2 entity-2
     :malware-3 entity-3}))

(deftest-for-each-store malware-queries-test
  (helpers/set-capabilities! "foouser" ["foogroup"] "user" all-capabilities)
  (whoami-helpers/set-whoami-response "45c1f5e3f05d0"
                                      "foouser"
                                      "foogroup"
                                      "user")
  (let [datamap (init-graph-data)
        malware-1-id (get-in datamap [:malware-1 :id])
        malware-2-id (get-in datamap [:malware-2 :id])
        malware-3-id (get-in datamap [:malware-3 :id])
        graphql-queries (str (slurp "test/data/malware.graphql")
                             (slurp "test/data/fragments.graphql"))]

    (testing "malware query"
      (let [{:keys [data errors status]}
            (gh/query graphql-queries
                      {:id (get-in datamap [:malware-1 :id])}
                      "MalwareQueryTest")]
        (is (= 200 status))
        (is (empty? errors) "No errors")

        (testing "the malware"
          (is (= (:malware-1 datamap)
                 (-> (:malware data)
                     (dissoc :relationships)))))

        (testing "relationships connection"
          (gh/connection-test "MalwareQueryTest"
                              graphql-queries
                              {:id malware-1-id
                               :relationship_type "variant-of"}
                              [:malware :relationships]
                              [{:relationship_type "variant-of"
                                :target_ref malware-2-id
                                :source_ref malware-1-id
                                :source_entity (:malware-1 datamap)
                                :target_entity (:malware-2 datamap)}
                               {:relationship_type "variant-of"
                                :target_ref malware-3-id
                                :source_ref malware-1-id
                                :source_entity (:malware-1 datamap)
                                :target_entity (:malware-3 datamap)}])

          (testing "sorting"
            (gh/connection-sort-test
             "MalwareQueryTest"
             graphql-queries
             {:id malware-1-id}
             [:malware :relationships]
             sort-fields/relationship-sort-fields)))

        (testing "feedbacks connection"
          (gh/connection-test "MalwareFeedbacksQueryTest"
                              graphql-queries
                              {:id malware-1-id}
                              [:malware :feedbacks]
                              [(gh/feedback-1 malware-1-id)
                               (gh/feedback-2 malware-1-id)])

          (testing "sorting"
            (gh/connection-sort-test
             "MalwareFeedbacksQueryTest"
             graphql-queries
             {:id malware-1-id}
             [:malware :feedbacks]
             sort-fields/feedback-sort-fields))))
      (testing "malwares query"
        (testing "malwares connection"
          (gh/connection-test "MalwaresQueryTest"
                              graphql-queries
                              {"query" "*"}
                              [:malwares]
                              [(:malware-1 datamap)
                               (:malware-2 datamap)
                               (:malware-3 datamap)])

          (testing "sorting"
            (gh/connection-sort-test
             "MalwaresQueryTest"
             graphql-queries
             {:query "*"}
             [:malwares]
             sort-fields/malware-sort-fields)))

        (testing "query argument"
          (let [{:keys [data errors status]}
                (gh/query graphql-queries
                          {:query (format "name:\"%s\""
                                          (get-in
                                           datamap
                                           [:malware-1 :name]))}
                          "MalwaresQueryTest")]
            (is (= 200 status))
            (is (empty? errors) "No errors")
            (is (= 1 (get-in data [:malwares :totalCount]))
                "Only one malware matches to the query")
            (is (= (:malware-1 datamap)
                   (first (get-in data [:malwares :nodes])))
                "The malware matches the search query")))))))
